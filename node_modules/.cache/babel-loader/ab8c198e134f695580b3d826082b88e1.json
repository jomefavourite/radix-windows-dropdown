{"ast":null,"code":"import { useLayoutEffect as e } from \"@radix-ui/react-use-layout-effect\";\nimport * as t from \"react\";\nvar n,\n    o = 0;\nexport function useBodyPointerEvents(_ref) {\n  var r = _ref.disabled;\n  var u = t.useRef(!1),\n      c = t.useRef(!1);\n  t.useEffect(function () {\n    var e = function e(_e) {\n      var t = \"mouse\" === _e.pointerType;\n      u.current = !t, c.current = t && 0 === _e.button;\n    },\n        t = function t() {\n      u.current = !1, c.current = !1;\n    };\n\n    return document.addEventListener(\"pointerdown\", e), document.addEventListener(\"pointerup\", t), function () {\n      document.removeEventListener(\"pointerdown\", e), document.removeEventListener(\"pointerup\", t);\n    };\n  }, []), e(function () {\n    if (r) {\n      var _e2 = function _e2() {\n        o--, 0 === o && (document.body.style.pointerEvents = n);\n      };\n\n      return 0 === o && (n = document.body.style.pointerEvents), document.body.style.pointerEvents = \"none\", o++, function () {\n        u.current ? document.addEventListener(\"click\", _e2, {\n          once: !0\n        }) : c.current ? document.addEventListener(\"pointerup\", _e2, {\n          once: !0\n        }) : _e2();\n      };\n    }\n  }, [r]);\n}","map":{"version":3,"sources":["packages/react/use-body-pointer-events/src/useBodyPointerEvents.tsx"],"names":["changeCount","originalBodyPointerEvents","useBodyPointerEvents","disabled","isTouchOrPenPressedRef","React","useRef","isMouseLeftPressedRef","useEffect","handlePointerDown","event","isMouse","pointerType","current","button","handlePointerUp","document","addEventListener","removeEventListener","useLayoutEffect","body","style","pointerEvents","resetPointerEvents","once"],"mappings":";;AAGA,IACIC,CADJ;AAAA,IAAID,CAAAA,GAAc,CAAlB;AAAkB,OAGlB,SAASE,oBAAT,OAAgCC;EAAAA,IAAAA,CAAAA,QAAFA,QAAEA;EAC9B,IAAMC,CAAAA,GAAyBC,CAAAA,CAAMC,MAAND,CAAMC,CAAO,CAAbD,CAA/B;EAAA,IACME,CAAAA,GAAwBF,CAAAA,CAAMC,MAAND,CAAMC,CAAO,CAAbD,CAD9B;EAGAA,CAAAA,CAAMG,SAANH,CAAgB,YAAA;IACd,IAAMI,CAAAA,GAAqBC,WAAAA,EAAAA,EAAAA;MACzB,IAAMC,CAAAA,GAAgC,YAAtBD,EAAAA,CAAME,WAAtB;MACAR,CAAAA,CAAuBS,OAAvBT,GAAuBS,CAAWF,CAAlCP,EACAG,CAAAA,CAAsBM,OAAtBN,GAAgCI,CAAAA,IAA4B,MAAjBD,EAAAA,CAAMI,MADjDV;IACiDU,CAHnD;IAAA,IAKMC,CAAAA,GAAkB,SAAlBA,CAAkB,GAAA;MACtBX,CAAAA,CAAuBS,OAAvBT,GAAuBS,CAAU,CAAjCT,EACAG,CAAAA,CAAsBM,OAAtBN,GAAsBM,CAAU,CADhCT;IACgC,CAPlC;;IAWA,OAFAY,QAAAA,CAASC,gBAATD,CAA0B,aAA1BA,EAAyCP,CAAzCO,GACAA,QAAAA,CAASC,gBAATD,CAA0B,WAA1BA,EAAuCD,CAAvCC,CADAA,EAEO,YAAA;MACLA,QAAAA,CAASE,mBAATF,CAA6B,aAA7BA,EAA4CP,CAA5CO,GACAA,QAAAA,CAASE,mBAATF,CAA6B,WAA7BA,EAA0CD,CAA1CC,CADAA;IAC0CD,CAF5C;EAE4CA,CAd9CV,EAgBG,EAhBHA,GAkBAc,CAAAA,CAAgB,YAAA;IACd,IAAIhB,CAAJ,EAAc;MAAA,IAKHoB,GALG,GAKZ,SAASA,GAAT,GAASA;QACPvB,CAAAA,IACoB,MAAhBA,CAAgB,KAClBgB,QAAAA,CAASI,IAATJ,CAAcK,KAAdL,CAAoBM,aAApBN,GAAoCf,CADlB,CADpBD;MASF,CAfY;;MAeZ,OAdoB,MAAhBA,CAAgB,KAClBC,CAAAA,GAA4Be,QAAAA,CAASI,IAATJ,CAAcK,KAAdL,CAAoBM,aAD9B,GAWpBN,QAAAA,CAASI,IAATJ,CAAcK,KAAdL,CAAoBM,aAApBN,GAAoC,MAXhB,EAYpBhB,CAAAA,EAZoB,EAcb,YAAA;QACDI,CAAAA,CAAuBS,OAAvBT,GAkBFY,QAAAA,CAASC,gBAATD,CAA0B,OAA1BA,EAAmCO,GAAnCP,EAAuD;UAAEQ,IAAAA,EAAAA,CAAM;QAAR,CAAvDR,CAlBEZ,GAmBOG,CAAAA,CAAsBM,OAAtBN,GAMTS,QAAAA,CAASC,gBAATD,CAA0B,WAA1BA,EAAuCO,GAAvCP,EAA2D;UAAEQ,IAAAA,EAAAA,CAAM;QAAR,CAA3DR,CANST,GAQTgB,GAAAA,EA3BEnB;MA2BFmB,CA5BJ;IA4BIA;EAAAA,CA5CRJ,EAgDG,CAAChB,CAAD,CAhDHgB,CAlBAd;AAkEIF","sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nlet changeCount = 0;\nlet originalBodyPointerEvents: string;\n\nfunction useBodyPointerEvents({ disabled }: { disabled: boolean }) {\n  const isTouchOrPenPressedRef = React.useRef(false);\n  const isMouseLeftPressedRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      const isMouse = event.pointerType === 'mouse';\n      isTouchOrPenPressedRef.current = !isMouse;\n      isMouseLeftPressedRef.current = isMouse && event.button === 0;\n    };\n    const handlePointerUp = () => {\n      isTouchOrPenPressedRef.current = false;\n      isMouseLeftPressedRef.current = false;\n    };\n    document.addEventListener('pointerdown', handlePointerDown);\n    document.addEventListener('pointerup', handlePointerUp);\n    return () => {\n      document.removeEventListener('pointerdown', handlePointerDown);\n      document.removeEventListener('pointerup', handlePointerUp);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    if (disabled) {\n      if (changeCount === 0) {\n        originalBodyPointerEvents = document.body.style.pointerEvents;\n      }\n\n      function resetPointerEvents() {\n        changeCount--;\n        if (changeCount === 0) {\n          document.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      }\n\n      document.body.style.pointerEvents = 'none';\n      changeCount++;\n\n      return () => {\n        if (isTouchOrPenPressedRef.current) {\n          /**\n           * We force pointer-events to remain disabled until `click` fires on touch devices\n           * because browsers implement a ~350ms delay between the time the user stops\n           * touching the display and when the browser executes events. We need to ensure we\n           * don't reactivate pointer-events within this timeframe otherwise the browser may\n           * execute events that should have been prevented.\n           *\n           * We are aware that `touch-action: manipulation` shortens this delay for events,\n           * but it isn't enough to cover all cases.\n           *\n           * When there is an input on screen:\n           * - if a click event is bound to it, it will fire after a `pointerdown` which may\n           * have re-enabled pointer-events (regardless of `touch-action: manipulation`).\n           * - if clicking it causes the page to zoom, the events will wait for the zoom to\n           * finish before executing on the input.\n           * - if long pressesing it, the events will execute after the longpress delay.\n           */\n          document.addEventListener('click', resetPointerEvents, { once: true });\n        } else if (isMouseLeftPressedRef.current) {\n          /**\n           * We force pointer-events to remain disabled until `pointerup` otherwise, events\n           * bound to inert controls could execute after pointer-events have been re-enabled,\n           * e.g. `select` event.\n           */\n          document.addEventListener('pointerup', resetPointerEvents, { once: true });\n        } else {\n          resetPointerEvents();\n        }\n      };\n    }\n  }, [disabled]);\n}\n\nexport { useBodyPointerEvents };\n"]},"metadata":{},"sourceType":"module"}