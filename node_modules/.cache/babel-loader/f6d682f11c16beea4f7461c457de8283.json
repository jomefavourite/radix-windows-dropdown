{"ast":null,"code":"import _slicedToArray from \"/project/radix-windows-dropdown/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as e from \"react\";\nexport function useSize(r) {\n  var _e$useState = e.useState(void 0),\n      _e$useState2 = _slicedToArray(_e$useState, 2),\n      i = _e$useState2[0],\n      t = _e$useState2[1];\n\n  return e.useEffect(function () {\n    if (r) {\n      var _e = new ResizeObserver(function (e) {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        var i = e[0];\n        var o, n;\n\n        if (\"borderBoxSize\" in i) {\n          var _e2 = i.borderBoxSize,\n              _r = Array.isArray(_e2) ? _e2[0] : _e2;\n\n          o = _r.inlineSize, n = _r.blockSize;\n        } else {\n          var _e3 = r.getBoundingClientRect();\n\n          o = _e3.width, n = _e3.height;\n        }\n\n        t({\n          width: o,\n          height: n\n        });\n      });\n\n      return _e.observe(r, {\n        box: \"border-box\"\n      }), function () {\n        t(void 0), _e.unobserve(r);\n      };\n    }\n  }, [r]), i;\n}","map":{"version":3,"sources":["packages/react/use-size/src/useSize.tsx"],"names":["useSize","element","size","setSize","React","useState","undefined","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderSize","rect","getBoundingClientRect","observe","box","unobserve"],"mappings":";;OAIA,SAASA,OAAT,CAAiBC,CAAjB,EAAiBA;EACf,kBAAwBG,CAAAA,CAAMC,QAAND,CAAMC,KAAwDC,CAA9DF,CAAxB;EAAA;EAAA,IAAOF,CAAP;EAAA,IAAaC,CAAb;;EA8CA,OA5CAC,CAAAA,CAAMG,SAANH,CAAgB,YAAA;IACd,IAAIH,CAAJ,EAAa;MACX,IAAMO,EAAAA,GAAiB,IAAIC,cAAJ,CAAoBC,UAAAA,CAAAA,EAAAA;QACzC,IAAA,CAAKC,KAAAA,CAAMC,OAAND,CAAcD,CAAdC,CAAL,EACE;QAKF,IAAA,CAAKD,CAAAA,CAAQG,MAAb,EACE;QAGF,IAAMC,CAAAA,GAAQJ,CAAAA,CAAQ,CAARA,CAAd;QACA,IAAIK,CAAJ,EACIC,CADJ;;QAGA,IAAI,mBAAmBF,CAAvB,EAA8B;UAC5B,IAAMG,GAAAA,GAAkBH,CAAAA,CAAK,aAA7B;UAAA,IAEMI,EAAAA,GAAaP,KAAAA,CAAMC,OAAND,CAAcM,GAAdN,IAAiCM,GAAAA,CAAgB,CAAhBA,CAAjCN,GAAsDM,GAFzE;;UAGAF,CAAAA,GAAQG,EAAAA,CAAU,UAAlBH,EACAC,CAAAA,GAASE,EAAAA,CAAU,SADnBH;QACmB,CALrB,MAMO;UAGL,IAAMI,GAAAA,GAAOlB,CAAAA,CAAQmB,qBAARnB,EAAb;;UACAc,CAAAA,GAAQI,GAAAA,CAAKJ,KAAbA,EACAC,CAAAA,GAASG,GAAAA,CAAKH,MADdD;QAIFZ;;QAAAA,CAAAA,CAAQ;UAAEY,KAAAA,EAAAA,CAAF;UAASC,MAAAA,EAAAA;QAAT,CAARb,CAAAA;MAAiBa,CA7BI,CAAvB;;MAkCA,OAFAR,EAAAA,CAAea,OAAfb,CAAuBP,CAAvBO,EAAgC;QAAEc,GAAAA,EAAK;MAAP,CAAhCd,GAEO,YAAA;QACLL,CAAAA,CAAAA,KAAQG,CAARH,CAAAA,EACAK,EAAAA,CAAee,SAAff,CAAyBP,CAAzBO,CADAL;MACyBF,CAF3B;IAE2BA;EAAAA,CAtC/BG,EA0CG,CAACH,CAAD,CA1CHG,GA4COF,CAAP;AAAOA","sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(element);\n      };\n    }\n    return;\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}