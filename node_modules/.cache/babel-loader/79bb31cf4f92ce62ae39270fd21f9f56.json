{"ast":null,"code":"import _slicedToArray from \"/project/radix-windows-dropdown/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as e from \"react\";\nexport function useDirection(t, n) {\n  var _e$useState = e.useState(\"ltr\"),\n      _e$useState2 = _slicedToArray(_e$useState, 2),\n      r = _e$useState2[0],\n      o = _e$useState2[1],\n      _e$useState3 = e.useState(),\n      _e$useState4 = _slicedToArray(_e$useState3, 2),\n      i = _e$useState4[0],\n      u = _e$useState4[1],\n      c = e.useRef(0);\n\n  return e.useEffect(function () {\n    if (void 0 === n && null != t && t.parentElement) {\n      var _e = getComputedStyle(t.parentElement);\n\n      u(_e);\n    }\n  }, [t, n]), e.useEffect(function () {\n    return void 0 === n && function e() {\n      c.current = requestAnimationFrame(function () {\n        var t = null == i ? void 0 : i.direction;\n        t && o(t), e();\n      });\n    }(), function () {\n      return cancelAnimationFrame(c.current);\n    };\n  }, [i, n, o]), n || r;\n}","map":{"version":3,"sources":["packages/react/use-direction/src/useDirection.tsx"],"names":["useDirection","element","directionProp","direction","setDirection","React","useState","computedStyle","setComputedStyle","rAFRef","useRef","useEffect","undefined","parentElement","getComputedStyle","getDirection","current","requestAnimationFrame","dir","cancelAnimationFrame"],"mappings":";;OAIO,SAASA,YAAT,CAAsBC,CAAtB,EAAmDC,CAAnD,EAAmDA;EACxD,kBAAkCG,CAAAA,CAAMC,QAAND,CAA0B,KAA1BA,CAAlC;EAAA;EAAA,IAAOF,CAAP;EAAA,IAAkBC,CAAlB;EAAA,mBAC0CC,CAAAA,CAAMC,QAAND,EAD1C;EAAA;EAAA,IACOE,CADP;EAAA,IACsBC,CADtB;EAAA,IAEMC,CAFN,GAEeJ,CAAAA,CAAMK,MAANL,CAAqB,CAArBA,CAFf;;EA4BA,OAxBAA,CAAAA,CAAMM,SAANN,CAAgB,YAAA;IAKd,IAAA,KAAsBO,CAAtB,KAAIV,CAAJ,IAAIA,QAA+BD,CAAnC,IAAmCA,CAAAA,CAASY,aAA5C,EAA2D;MACzD,IAAMN,EAAAA,GAAgBO,gBAAAA,CAAiBb,CAAAA,CAAQY,aAAzBC,CAAtB;;MACAN,CAAAA,CAAiBD,EAAjBC,CAAAA;IAAiBD;EAAAA,CAPrBF,EASG,CAACJ,CAAD,EAAUC,CAAV,CATHG,GAWAA,CAAAA,CAAMM,SAANN,CAAgB;IAAA,OAAA,KASQO,CATR,KASVV,CATU,IACd,SAASa,CAAT,GAASA;MACPN,CAAAA,CAAOO,OAAPP,GAAiBQ,qBAAAA,CAAsB,YAAA;QACrC,IAAMC,CAAAA,GAAMX,QAAAA,CAAAA,GAAAA,KAAH,CAAGA,GAAAA,CAAAA,CAAeJ,SAA3B;QACIe,CAAAA,IAAKd,CAAAA,CAAac,CAAbd,CAALc,EACJH,CAAAA,EADIG;MACJH,CAHeE,CAAjBR;IAO+BM,CARjC,EADc,EAUP;MAAA,OAAMI,oBAAAA,CAAqBV,CAAAA,CAAOO,OAA5BG,CAAN;IAAA,CAVO;EAAA,CAAhBd,EAWG,CAACE,CAAD,EAAgBL,CAAhB,EAA+BE,CAA/B,CAXHC,CAXAA,EAwBOH,CAAAA,IAAiBC,CAAxB;AAAwBA","sourcesContent":["import * as React from 'react';\n\ntype Direction = 'ltr' | 'rtl';\n\nexport function useDirection(element: HTMLElement | null, directionProp?: Direction) {\n  const [direction, setDirection] = React.useState<Direction>('ltr');\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const rAFRef = React.useRef<number>(0);\n\n  React.useEffect(() => {\n    // We check inherited direction of the parent instead of the `element` itself.\n    // This is because we internally set the computed `dir` on the element so wouldn't be\n    // able to react to changes to the inherited direction. The `dir` attribute we set should\n    // always sync with the direction prop OR its inherited direction.\n    if (directionProp === undefined && element?.parentElement) {\n      const computedStyle = getComputedStyle(element.parentElement);\n      setComputedStyle(computedStyle);\n    }\n  }, [element, directionProp]);\n\n  React.useEffect(() => {\n    function getDirection() {\n      rAFRef.current = requestAnimationFrame(() => {\n        const dir = computedStyle?.direction as Direction | '' | undefined;\n        if (dir) setDirection(dir);\n        getDirection();\n      });\n    }\n\n    if (directionProp === undefined) getDirection();\n    return () => cancelAnimationFrame(rAFRef.current);\n  }, [computedStyle, directionProp, setDirection]);\n\n  return directionProp || direction;\n}\n"]},"metadata":{},"sourceType":"module"}