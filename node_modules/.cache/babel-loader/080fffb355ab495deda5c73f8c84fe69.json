{"ast":null,"code":"import * as o from \"react\";\nexport function composeRefs() {\n  for (var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++) {\n    o[_key] = arguments[_key];\n  }\n\n  return function (e) {\n    return o.forEach(function (o) {\n      return function (o, e) {\n        \"function\" == typeof o ? o(e) : null != o && (o.current = e);\n      }(o, e);\n    });\n  };\n}\nexport function useComposedRefs() {\n  for (var _len2 = arguments.length, e = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    e[_key2] = arguments[_key2];\n  }\n\n  return o.useCallback(composeRefs.apply(void 0, e), e);\n}","map":{"version":3,"sources":["packages/react/compose-refs/src/composeRefs.tsx"],"names":["ref","value","current","composeRefs","refs","node","forEach","setRef","useComposedRefs","React","useCallback"],"mappings":";OAoBA,SAASG,WAAT,GAA2BC;EAAAA,kCAAAA,CAAAA;IAAAA,CAAAA;EAAAA;;EACzB,OAAQC,UAAAA,CAAAA;IAAAA,OAAYD,CAAAA,CAAKE,OAALF,CAAcJ,UAAAA,CAAAA;MAAAA,OAbpC,UAAmBA,CAAnB,EAAwCC,CAAxC,EAAwCA;QACnB,cAAA,OAARD,CAAQ,GACjBA,CAAAA,CAAIC,CAAJD,CADiB,GAERA,QAAAA,CAAAA,KACRA,CAAAA,CAAkCE,OAAlCF,GAA4CC,CADpCD,CAFQ;MAYuBO,CAb5C,CAamDP,CAbnD,EAawDK,CAbxD,CAaoCL;IAAAA,CAAdI,CAAZC;EAAAA,CAAR;AAAsDA;AAAAA,OAOxD,SAASG,eAAT,GAA+BJ;EAAAA,mCAAAA,CAAAA;IAAAA,CAAAA;EAAAA;;EAE7B,OAAOK,CAAAA,CAAMC,WAAND,CAAkBN,WAAAA,MAAAA,SAAeC,CAAfD,CAAlBM,EAAwCL,CAAxCK,CAAP;AAA+CL","sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"]},"metadata":{},"sourceType":"module"}