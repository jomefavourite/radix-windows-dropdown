{"ast":null,"code":"import _slicedToArray from \"/project/radix-windows-dropdown/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport * as t from \"react\";\nexport function useControllableState(_ref) {\n  var o = _ref.prop,\n      r = _ref.defaultProp,\n      _ref$onChange = _ref.onChange,\n      n = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n\n  var _ref2 = function (_ref4) {\n    var o = _ref4.defaultProp,\n        r = _ref4.onChange;\n\n    var n = t.useState(o),\n        _n = _slicedToArray(n, 1),\n        a = _n[0],\n        u = t.useRef(a),\n        c = e(r);\n\n    return t.useEffect(function () {\n      u.current !== a && (c(a), u.current = a);\n    }, [a, u, c]), n;\n  }({\n    defaultProp: r,\n    onChange: n\n  }),\n      _ref3 = _slicedToArray(_ref2, 2),\n      a = _ref3[0],\n      u = _ref3[1],\n      c = void 0 !== o,\n      f = c ? o : a,\n      l = e(n);\n\n  return [f, t.useCallback(function (e) {\n    if (c) {\n      var _t = e,\n          _r = \"function\" == typeof e ? _t(o) : e;\n\n      _r !== o && l(_r);\n    } else u(e);\n  }, [c, o, u, l])];\n}","map":{"version":3,"sources":["packages/react/use-controllable-state/src/useControllableState.tsx"],"names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","useUncontrolledState","isControlled","undefined","value","handleChange","useCallbackRef","React","useCallback","nextValue","setter","uncontrolledState","useState","prevValueRef","useRef","useEffect","current"],"mappings":";;;OAWA,SAASA,oBAAT,OAGa;EAAA,IAFXC,CAEW,QAHoBA,IAGpB;EAAA,IADXC,CACW,QAHoBD,WAGpB;EAAA,yBAHoBA,QAGpB;EAAA,IAAXE,CAAW,8BAAA,YAAA,CAAA,CAAA;;EAEX,YAqBF,iBAEEA;IAAAA,IADAD,CACAC,SAF+BD,WAE/BC;IAAAA,IAAAA,CAAAA,SAF+BD,QAE/BC;;IAEMa,IAAAA,CAAAA,GAAoBJ,CAAAA,CAAMK,QAANL,CAA8BV,CAA9BU,CAApBI;IAAAA,wBACUA,CADVA;IAAAA,IACCP,CADDO;IAAAA,IAEAE,CAFAF,GAEeJ,CAAAA,CAAMO,MAANP,CAAaH,CAAbG,CAFfI;IAAAA,IAGAN,CAHAM,GAGeL,CAAAA,CAAeR,CAAfQ,CAHfK;;IAYN,OAPAJ,CAAAA,CAAMQ,SAANR,CAAgB,YAAA;MACVM,CAAAA,CAAaG,OAAbH,KAAyBT,CAAzBS,KACFR,CAAAA,CAAaD,CAAbC,CAAAA,EACAQ,CAAAA,CAAaG,OAAbH,GAAuBT,CAFrBS;IAEqBT,CAH3BG,EAKG,CAACH,CAAD,EAAQS,CAAR,EAAsBR,CAAtB,CALHE,GAOOI,CAAP;EArCgDV,CAqBlD,CArBuE;IAAEJ,WAAAA,EAAAA,CAAF;IAAeC,QAAAA,EAAAA;EAAf,CAqBvE,CArBE;EAAA;EAAA,IAAOC,CAAP;EAAA,IAAyBC,CAAzB;EAAA,IACME,CADN,GACMA,KAAwBC,CAAxBD,KAAeN,CADrB;EAAA,IAEMQ,CAFN,GAEcF,CAAAA,GAAeN,CAAfM,GAAsBH,CAFpC;EAAA,IAGMM,CAHN,GAGqBC,CAAAA,CAAeR,CAAfQ,CAHrB;;EAkBA,OAAO,CAACF,CAAD,EAb+DG,CAAAA,CAAMC,WAAND,CACnEE,UAAAA,CAAAA,EAAAA;IACC,IAAIP,CAAJ,EAAkB;MAChB,IAAMQ,EAAAA,GAASD,CAAf;MAAA,IACML,EAAAA,GAA6B,cAAA,OAAdK,CAAc,GAAaC,EAAAA,CAAOd,CAAPc,CAAb,GAA4BD,CAD/D;;MAEIL,EAAAA,KAAUR,CAAVQ,IAAgBC,CAAAA,CAAaD,EAAbC,CAAhBD;IAA6BA,CAHnC,MAKEJ,CAAAA,CAAoBS,CAApBT,CAAAA;EAAoBS,CAP4CF,EAUpE,CAACL,CAAD,EAAeN,CAAf,EAAqBI,CAArB,EAA0CK,CAA1C,CAVoEE,CAa/D,CAAP;AAH4CF","sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}